// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input? (mux16 with 0
        nx, // negate the x input? (not16
        zy, // zero the y input? (mux16
        ny, // negate the y input? (not16
        f,  // compute (out = x + y) or (out = x & y)? (add16 or and16 (what decided the or?
        no; // negate the out output? (not16
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
	//zx
	Mux16(a=x, b[0..15]=false, sel=zx, out=zxOut);
	
	//nx
	Not16(in=zxOut, out=notxOut);
	Mux16(a=zxOut, b=notxOut, sel=nx, out=nxOut);
	
	//zy
	Mux16(a=y, b[0..15]=false, sel=zy, out=zyOut);
	
	//ny
	Not16(in=zyOut, out=notyOut);
	Mux16(a=zyOut, b=notyOut, sel=ny, out=nyOut);
	
	//f
	Add16(a=nxOut, b=nyOut, out=addOut);
	And16(a=nxOut, b=nyOut, out=andOut);
	Mux16(a=andOut, b=addOut, sel=f, out=fOut);
	
	//no() ng (if out is negative
	Not16(in=fOut, out=noOut);
	Mux16(a=fOut, b=noOut, sel=no, out[15]=ng, out=orIn);
	
	//SOMETHING GETS FUCKED UP HERE AND I HAVE NO IDEA WHAT. MAY NEED TO DO THIS ON LINUX SINCE THE FUCKING 
	//SIMULATORS DON"T WORK
	//zr (if out ==0) 
	Or8Way(in=orIn[0..7], out=or1);
	Or8Way(in=orIn[8..15], out=or2);
	Or(a=or1, b=or2, out=zr);
	
	Or16(a=orIn, b[0..15]=false, out=out);
}